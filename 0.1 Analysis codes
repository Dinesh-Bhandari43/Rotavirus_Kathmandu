title: "Climate variability and rotavirus infection in Kathmandu Nepal"
author: "Dinesh"
date: "29 January 2019"
output: word_document
---

```{r setup, include=FALSE}
### loading the dataset
library(readr)
compiled_dataset <- read_csv("U:/PhD project/PhDProject2/Dataanalysis/compiled dataset.csv")
data <- data.frame(compiled_dataset)
```


```{r data, echo=TRUE}
## loading the required libararies####
library(tsModel)
library(splines)
library(dlnm)
library(Epi)
library(lmtest)
library(Hmisc)
library(devtools)
library(AER)
library(DHARMa)
library(foreign) 

```


```{r, echo=FALSE}
summary(data)

datacor <- rcorr(as.matrix(data[,4:11]))
datacor$r
datacor$P

##Calculating Pearson's correlation coefficients for predictors except lag variables"
cp <- cor(data[,4:11])


## Visualising the correlaiton matrix ###
library(corrplot)
palette = colorRampPalette(c("blue", "green", "red")) (20)
corrplot(cp, col = palette, method= "number")

##Generating heatmap for the correlation plot##
heatmap(x = cp, col = palette, symm = TRUE)

### testing for overdispersion in the data##
rd <- glm(Number_of_cases ~ ., data = data, family = poisson)
dispersiontest(rd,trafo=1)
res <- simulateResiduals(rd, refit = T)
testDispersion(res)
plot(res)
```

```{r plot, echo=TRUE}

#### Plotting the variables###


data <- compiled_dataset
oldpar <- par(no.readonly=TRUE)
par(mex=0.8,mfrow=c(3,2))

plot(data$time,data$max_temp,pch=".",type="o",cex=5, col= "blue", main="Trend of weekly maximum temperature  in Kathmandu district",
     ylab="Temperature in Celsius",xlab="Number of weeks in the years between 2013-2016")


plot(data$time,data$min_temp,pch=".", type="o",cex=5, col= "red", main="Trend of weekly minimum temperature in kathmandu district",
     ylab="Temperature in celsisu",xlab="Number of weeks in the years between 2013-2016")


plot(data$time,data$mean_temp,pch=".",type="o",cex=5, col= "green", main="Trend of weekly mean temperature  in Kathmandu district",
     ylab="Temperature in Celsius",xlab="Number of weeks in the years between 2013-2016")

plot(data$time,data$Number_of_cases,pch=".",type="o",cex=5,col= "black", main="Trend of weekly rotavarius cases in Kathmandu district",
     ylab="Number or rotavirus positive cases",xlab="Number of weeks in the years between 2013-2016")


plot(data$time,data$mean_rh,pch=".", cex=5,type="o", col= "cyan", main="Trend of weekly mean relative humidity in kathmandu district",
     ylab="mean relative humidity",xlab="Number of weeks in the years between 2013-2016")

plot(data$time,data$rainfall_sum,pch=".", cex=5,type="o", col= "brown", main="Trend of total weekly rainfall in kathmandu district",
     ylab="Total weekly rainfall",xlab="Number of weeks in the years between 2013-2016")

```

```{r modelling, echo=TRUE}
### Defining crossbasis for temperature###

cbmax_temp <-crossbasis(data$max_temp,lag=4, 
                        argvar=list(fun="ns", df=3), arglag=list(fun="ns",degree=3))

### Modelling the effect##
Model1 <- glm(Number_of_cases~cbmax_temp+time+harmonic(data$time,nfreq=6,
      period=52)+bs(rainfall_sum, df=3)+ ns(mean_rh, df=3), data, family=poisson)
summary(Model1)
BIC(Model1)

ns.pred <- crosspred(cbmax_temp,Model1,at=16.5:33.1, cen = 27.70)


### 3D plot###

plot(ns.pred, zlab= "Relative risk", xlab="Maximum_temperature in celsius", ylab="Lag weeks", col="red")

### OVerall effect plot###
     
plot(ns.pred, "overall", lwd=3, main="Overall effect", xlab="Maximum_Temperature", ylab="RR", col="red")


#### slice plot for different quantiles of temperature##
  percentiles <- round(quantile(data$max_temp,c(0.1,0.25,0.75, 0.99)),1)
     ns.pred2 <- crosspred(cbmax_temp,Model1,at=percentiles, cen = 27.70)
     plot(ns.pred2,var=percentiles,ci="bars",type="p",col="red",lag=c(0,1,2,4))


ns.pred$allRRfit
cbind(ns.pred$allRRlow,ns.pred$allRRhigh)

```


```{r check, echo=TRUE}
#### Model check####

res <- residuals(Model1, type="deviance")

hist(res)
acf(res, lag.max = 20)
pacf(res, lag.max = 20)
```

```{r, echo=TRUE}
###attributable risk function###
attrdl <- function(x,basis,cases,model=NULL,coef=NULL,vcov=NULL,type="af",
         dir="back",tot=TRUE,cen,range=NULL,sim=FALSE,nsim=5000) {
  ################################################################################
  #
  # CHECK VERSION OF THE DLNM PACKAGE
  if(packageVersion("dlnm")<"2.2.0") 
    stop("update dlnm package to version >= 2.2.0")
  #
  # EXTRACT NAME AND CHECK type AND dir
  name <- deparse(substitute(basis))
  type <- match.arg(type,c("an","af"))
  dir <- match.arg(dir,c("back","forw"))
  #
  # DEFINE CENTERING
  if(missing(cen) && is.null(cen <- attr(basis,"argvar")$cen))
    stop("'cen' must be provided")
  if(!is.numeric(cen) && length(cen)>1L) stop("'cen' must be a numeric scalar")
  attributes(basis)$argvar$cen <- NULL
  #  
  # SELECT RANGE (FORCE TO CENTERING VALUE OTHERWISE, MEANING NULL RISK)
  if(!is.null(range)) x[x<range[1]|x>range[2]] <- cen
  #
  # COMPUTE THE MATRIX OF
  #   - LAGGED EXPOSURES IF dir="back"
  #   - CONSTANT EXPOSURES ALONG LAGS IF dir="forw"
  lag <- attr(basis,"lag")
  if(NCOL(x)==1L) {
    at <- if(dir=="back") tsModel:::Lag(x,seq(lag[1],lag[2])) else 
      matrix(rep(x,diff(lag)+1),length(x))
  } else {
    if(dir=="forw") stop("'x' must be a vector when dir='forw'")
    if(ncol(at <- x)!=diff(lag)+1) 
      stop("dimension of 'x' not compatible with 'basis'")
  }
  #
  # NUMBER USED FOR THE CONTRIBUTION AT EACH TIME IN FORWARD TYPE
  #   - IF cases PROVIDED AS A MATRIX, TAKE THE ROW AVERAGE
  #   - IF PROVIDED AS A TIME SERIES, COMPUTE THE FORWARD MOVING AVERAGE
  #   - THIS EXCLUDES MISSING ACCORDINGLY
  # ALSO COMPUTE THE DENOMINATOR TO BE USED BELOW
  if(NROW(cases)!=NROW(at)) stop("'x' and 'cases' not consistent")
  if(NCOL(cases)>1L) {
    if(dir=="back") stop("'cases' must be a vector if dir='back'")
    if(ncol(cases)!=diff(lag)+1) stop("dimension of 'cases' not compatible")
    den <- sum(rowMeans(cases,na.rm=TRUE),na.rm=TRUE)
    cases <- rowMeans(cases)
  } else {
    den <- sum(cases,na.rm=TRUE) 
    if(dir=="forw") 
      cases <- rowMeans(as.matrix(tsModel:::Lag(cases,-seq(lag[1],lag[2]))))
  }
  #
  ################################################################################
  #
  # EXTRACT COEF AND VCOV IF MODEL IS PROVIDED
  if(!is.null(model)) {
    cond <- paste0(name,"[[:print:]]*v[0-9]{1,2}\\.l[0-9]{1,2}")
    if(ncol(basis)==1L) cond <- name
    model.class <- class(model)
    coef <- dlnm:::getcoef(model,model.class)
    ind <- grep(cond,names(coef))
    coef <- coef[ind]
    vcov <- dlnm:::getvcov(model,model.class)[ind,ind,drop=FALSE]
    model.link <- dlnm:::getlink(model,model.class)
    if(model.link!="log") stop("'model' must have a log link function")
  }
  #
  # IF REDUCED ESTIMATES ARE PROVIDED
  typebasis <- ifelse(length(coef)!=ncol(basis),"one","cb")
  #
  ################################################################################
  #
  # PREPARE THE ARGUMENTS FOR TH BASIS TRANSFORMATION
  predvar <- if(typebasis=="one") x else seq(NROW(at))
  predlag <- if(typebasis=="one") 0 else dlnm:::seqlag(lag)
  #  
  # CREATE THE MATRIX OF TRANSFORMED CENTRED VARIABLES (DEPENDENT ON typebasis)
  if(typebasis=="cb") {
    Xpred <- dlnm:::mkXpred(typebasis,basis,at,predvar,predlag,cen)
    Xpredall <- 0
    for (i in seq(length(predlag))) {
      ind <- seq(length(predvar))+length(predvar)*(i-1)
      Xpredall <- Xpredall + Xpred[ind,,drop=FALSE]
    }
  } else {
    basis <- do.call(onebasis,c(list(x=x),attr(basis,"argvar")))
    Xpredall <- dlnm:::mkXpred(typebasis,basis,x,predvar,predlag,cen)
  }
  #  
  # CHECK DIMENSIONS  
  if(length(coef)!=ncol(Xpredall))
    stop("arguments 'basis' do not match 'model' or 'coef'-'vcov'")
  if(any(dim(vcov)!=c(length(coef),length(coef)))) 
    stop("arguments 'coef' and 'vcov' do no match")
  if(typebasis=="one" && dir=="back")
    stop("only dir='forw' allowed for reduced estimates")
  #
  ################################################################################
  #
  # COMPUTE AF AND AN 
  af <- 1-exp(-drop(as.matrix(Xpredall%*%coef)))
  an <- af*cases
  #
  # TOTAL
  #   - SELECT NON-MISSING OBS CONTRIBUTING TO COMPUTATION
  #   - DERIVE TOTAL AF
  #   - COMPUTE TOTAL AN WITH ADJUSTED DENOMINATOR (OBSERVED TOTAL NUMBER)
  if(tot) {
    isna <- is.na(an)
    af <- sum(an[!isna])/sum(cases[!isna])
    an <- af*den
  }
  #
  ################################################################################
  #
  # EMPIRICAL CONFIDENCE INTERVALS
  if(!tot && sim) {
    sim <- FALSE
    warning("simulation samples only returned for tot=T")
  }
  if(sim) {
    # SAMPLE COEF
    k <- length(coef)
    eigen <- eigen(vcov)
    X <- matrix(rnorm(length(coef)*nsim),nsim)
    coefsim <- coef + eigen$vectors %*% diag(sqrt(eigen$values),k) %*% t(X)
    # RUN THE LOOP
    # pre_afsim <- (1 - exp(- Xpredall %*% coefsim)) * cases # a matrix
    # afsim <- colSums(pre_afsim,na.rm=TRUE) / sum(cases[!isna],na.rm=TRUE)
    afsim <- apply(coefsim,2, function(coefi) {
      ani <- (1-exp(-drop(Xpredall%*%coefi)))*cases
      sum(ani[!is.na(ani)])/sum(cases[!is.na(ani)])
    })
    ansim <- afsim*den
  }
  #
  ################################################################################
  #
  res <- if(sim) {
    if(type=="an") ansim else afsim
  } else {
    if(type=="an") an else af    
  }
  #
  return(res)
}

```

```{r, echo=TRUE}

afff<- attrdl(data$max_temp,cbmax_temp,data$Number_of_cases,Model1,type="af",cen=27)
afn<- attrdl(data$max_temp,cbmax_temp,data$Number_of_cases,Model1,type="an",cen=27)
quantile(attrdl(data$max_temp,cbmax_temp,data$Number_of_cases,Model1,sim=T,nsim=1000,cen=27),c(0.025,0.975))
quantile(attrdl(data$max_temp,cbmax_temp,data$Number_of_cases,Model1,sim=T,type="an",nsim=1000,cen=27),c(0.025,0.975))
afff
afn
```
